{
  "_from": "memory-cache@^0.2.0",
  "_id": "memory-cache@0.2.0",
  "_inBundle": false,
  "_integrity": "sha1-eJCwHVLADI68nVM+H46xfjA0hxo=",
  "_location": "/memory-cache",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "memory-cache",
    "fetchSpec": "^0.2.0",
    "name": "memory-cache",
    "raw": "memory-cache@^0.2.0",
    "rawSpec": "^0.2.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/memory-cache/-/memory-cache-0.2.0.tgz",
  "_shasum": "7890b01d52c00c8ebc9d533e1f8eb17e3034871a",
  "_shrinkwrap": null,
  "_spec": "memory-cache@^0.2.0",
  "_where": "/home/ovh/Sync/Github/CricketScoreApp",
  "author": {
    "email": "npm@paulisageek.com",
    "name": "Paul Tarjan"
  },
  "bugs": {
    "url": "https://github.com/ptarjan/node-cache/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Ramon Snir",
      "email": "ramon@dynamicyield.com"
    },
    {
      "name": "Jacob Wenger",
      "email": "wenger.jacob@gmail.com"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "A simple in-memory cache. put(), get() and del()",
  "devDependencies": {
    "chai": "^2.2.0",
    "gulp": "^3.8.11",
    "gulp-exit": "0.0.2",
    "gulp-istanbul": "^0.7.0",
    "gulp-jshint": "^1.10.0",
    "gulp-mocha": "^2.0.1",
    "jshint-stylish": "^1.0.1",
    "sinon": "^1.14.1",
    "sinon-chai": "^2.7.0"
  },
  "homepage": "https://github.com/ptarjan/node-cache#readme",
  "keywords": [
    "cache",
    "ram",
    "simple",
    "storage"
  ],
  "license": "BSD-2-Clause",
  "main": "./index.js",
  "name": "memory-cache",
  "optionalDependencies": {},
  "readme": "# memory-cache [![Build Status](https://travis-ci.org/ptarjan/node-cache.svg?branch=master)](https://travis-ci.org/ptarjan/node-cache)\n\nA simple in-memory cache for node.js\n\n## Installation\n\n    npm install memory-cache --save\n\n## Usage\n\n```javascript\nvar cache = require('memory-cache');\n\n// now just use the cache\n\ncache.put('foo', 'bar');\nconsole.log(cache.get('foo'));\n\n// that wasn't too interesting, here's the good part\n\ncache.put('houdini', 'disappear', 100, function(key, value) {\n    console.log(key + ' did ' + value);\n}); // Time in ms\n\nconsole.log('Houdini will now ' + cache.get('houdini'));\n\nsetTimeout(function() {\n    console.log('Houdini is ' + cache.get('houdini'));\n}, 200);\n\n\n// create new cache instance\nvar newCache = new cache.Cache();\n\nnewCache.put('foo', 'newbaz');\n\nsetTimeout(function() {\n  console.log('foo in old cache is ' + cache.get('foo'));\n  console.log('foo in new cache is ' + newCache.get('foo'));\n}, 200);\n```\n\nwhich should print\n\n    bar\n    Houdini will now disappear\n    houdini did disappear\n    Houdini is null\n    foo in old cache is baz\n    foo in new cache is newbaz\n\n## API\n\n### put = function(key, value, time, timeoutCallback)\n\n* Simply stores a value\n* If time isn't passed in, it is stored forever\n* Will actually remove the value in the specified time in ms (via `setTimeout`)\n* timeoutCallback is optional function fired after entry has expired with key and value passed (`function(key, value) {}`)\n* Returns the cached value\n\n### get = function(key)\n\n* Retrieves a value for a given key\n* If value isn't cached, returns `null`\n\n### del = function(key)\n\n* Deletes a key, returns a boolean specifying whether or not the key was deleted\n\n### clear = function()\n\n* Deletes all keys\n\n### size = function()\n\n* Returns the current number of entries in the cache\n\n### memsize = function()\n\n* Returns the number of entries taking up space in the cache\n* Will usually `== size()` unless a `setTimeout` removal went wrong\n\n### debug = function(bool)\n\n* Turns on or off debugging\n\n### hits = function()\n\n* Returns the number of cache hits (only monitored in debug mode)\n\n### misses = function()\n\n* Returns the number of cache misses (only monitored in debug mode)\n\n### keys = function()\n\n* Returns all the cache keys\n\n### exportJson = function()\n\n* Returns a JSON string representing all the cache data\n* Any timeoutCallbacks will be ignored\n\n### importJson = function(json: string, options: { skipDuplicates: boolean })\n\n* Merges all the data from a previous call to `export` into the cache\n* Any existing entries before an `import` will remain in the cache\n* Any duplicate keys will be overwritten, unless `skipDuplicates` is `true`\n* Any entries that would have expired since being exported will expire upon being imported (but their callbacks will not be invoked)\n* Available `options`:\n  * `skipDuplicates`: If `true`, any duplicate keys will be ignored when importing them. Defaults to `false`.\n* Returns the new size of the cache\n\n### Cache = function()\n\n* Cache constructor\n* note that `require('cache')` would return the default instance of Cache\n* while `require('cache').Cache` is the actual class\n\n## Note on Patches/Pull Requests\n\n* Fork the project.\n* Make your feature addition or bug fix.\n* Send me a pull request.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ptarjan/node-cache.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "0.2.0"
}
